//TARJAN's ALGORITHM
class Solution {
    int[] visited;
    int[] firstTime;
    int[] lowestTime;
    List<List<Integer>> retList;
    List<List<Integer>> adjList;
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        adjList = new ArrayList<>();
        
        for (int i=0; i<n; i++) {
            adjList.add (new ArrayList<Integer>());
        }

        for (int i=0; i<connections.size(); i++) {
            List<Integer> con = connections.get(i);
            adjList.get(con.get(0)).add (con.get(1));
            adjList.get(con.get(1)).add (con.get(0));
        }

        retList = new ArrayList<>();
        visited = new int[n];
        firstTime = new int[n];
        lowestTime = new int[n];

        for (int i=0; i<n; i++) {
            if (visited[i] == 0) {
                dfs (i, 1, -1);
            }
        }
        // printTime(lowestTime);
        // printTime(firstTime);
        return retList;
    }

    // void printTime (int[] arr) {
    //     for (int i=0; i<arr.length; i++) {
    //         System.out.println (arr[i]);
    //     }
    //     System.out.println ("##############");
    // }

    private void dfs (int index, int steps, int parent) {
        firstTime[index] = lowestTime[index] = steps;
        visited[index] = 1;
        
        List<Integer> cons = adjList.get(index); 
        int lowest = lowestTime[index];

        for (int i=0; i<cons.size(); i++) {
            int server = cons.get(i);
            if (visited[server] == 0 && server != parent ) {
                dfs (server, steps+1, index);
            }
        }
        for (int i=0; i<cons.size(); i++) {
            int server = cons.get(i);
            if (server != parent) {
                lowest = Math.min (lowestTime[server], lowest);
            }
        }

        lowestTime[index] = lowest;
        if (parent != -1) {
            if (firstTime[parent] < lowestTime[index]) {
                retList.add (Arrays.asList(parent, index));
            }
        }
    }
}