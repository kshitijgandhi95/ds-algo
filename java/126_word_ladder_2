//copied
class Solution {
    Map<String, List<String> > map;
    List<List<String>> results;
    public List<List<String>> findLadders(String start, String end, List < String > orgList) {
        Set<String> dict = new HashSet<>(orgList);
        results = new ArrayList <> ();
        if (dict.size() == 0)
            return results;

        int min = Integer.MAX_VALUE;

        Queue < String > queue = new ArrayDeque < String > ();
        queue.add(start);

        map = new HashMap < String, List < String >> ();

        Map < String, Integer > ladder = new HashMap < String, Integer > ();
        for (String string: dict)
            ladder.put(string, Integer.MAX_VALUE);
        ladder.put(start, 0);

        dict.add(end);
        //BFS: Dijisktra search
        while (!queue.isEmpty()) {

            String word = queue.poll();

            int step = ladder.get(word) + 1; //'step' indicates how many steps are needed to travel to one word. 

            if (step > min) break;

            for (int i = 0; i < word.length(); i++) {
                StringBuilder builder = new StringBuilder(word);
                for (char ch = 'a'; ch <= 'z'; ch++) {
                    builder.setCharAt(i, ch);
                    String new_word = builder.toString();
                    if (ladder.containsKey(new_word)) {

                        if (step > ladder.get(new_word)) //Check if it is the shortest path to one word.
                            continue;
                        else if (step < ladder.get(new_word)) {
                            queue.add(new_word);
                            ladder.put(new_word, step);
                        } else; // It is a KEY line. If one word already appeared in one ladder,
                        // Do not insert the same word inside the queue twice. Otherwise it gets TLE.

                        if (map.containsKey(new_word)) //Build adjacent Graph
                            map.get(new_word).add(word);
                        else {
                            List < String > list = new LinkedList < String > ();
                            list.add(word);
                            map.put(new_word, list);
                            //It is possible to write three lines in one:
                            //map.put(new_word,new LinkedList<String>(Arrays.asList(new String[]{word})));
                            //Which one is better?
                        }

                        if (new_word.equals(end))
                            min = step;

                    } //End if dict contains new_word
                } //End:Iteration from 'a' to 'z'
            } //End:Iteration from the first to the last
        } //End While

        //BackTracking
        LinkedList < String > result = new LinkedList < String > ();
        backTrace(end, start, result);

        return results;
    }
    private void backTrace(String word, String start, List < String > list) {
        if (word.equals(start)) {
            list.add(0, start);
            results.add(new ArrayList < String > (list));
            list.remove(0);
            return;
        }
        list.add(0, word);
        if (map.get(word) != null)
            for (String s: map.get(word))
                backTrace(s, start, list);
        list.remove(0);
    }
}

// class Solution {
//     List<List<String>> retList;
//     Map<String, Boolean> mp;
//     public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
//         Set<String> set = new HashSet<>();
//         mp = new HashMap<>();
//         set.addAll (wordList);
//         retList = new ArrayList<>();

//         if (!set.contains(endWord)) {
//             return retList;
//         }

//         for (int i=0; i<beginWord.length(); i++) {
//             for (int j=0; j<26; j++) {
//                 char c = (char)('a' + j);
//                 String newString = beginWord.substring(0,i) + c + beginWord.substring(i+1);
//                 if (!set.contains(newString)) {
//                     continue;
//                 }
//                 Set<String> visited = new HashSet<>();
//                 List<String> possibleLadder = new ArrayList<>();
//                 possibleLadder.add (beginWord);
//                 possibleLadder.add (newString);
//                 visited.add (newString);
//                 // System.out.println ("#####");
//                 dfs (newString, endWord, set, visited, possibleLadder);
//             }
//         }
//         Collections.sort(retList, new Comparator<List<String>>(){
//             public int compare (List<String> l1, List<String> l2) {
//                 return l1.size() - l2.size();
//             }
//         });
//         if (retList.size()==0) {
//             return retList;
//         }
//         int minSize = retList.get(0).size();

//         List<List<String>> shortenedList = new ArrayList<>();

//         for (int i=0; i<retList.size(); i++) {
//             if (retList.get(i).size() == minSize) {
//                 shortenedList.add (retList.get(i));
//             }
//         }
//         return shortenedList;
//     }

//     private boolean dfs (String newString, String endWord, Set<String> set, Set<String> visited, List<String> possibleLadder) {
//         // System.out.println (newString + " " + endWord);
//         if (mp.containsKey(newString) && mp.get(newString) == false) {
//             return false;
//         }
//         if (newString.equals(endWord)) {
//             // possibleLadder.add (newString);
//             retList.add (possibleLadder);
//             return true;
//         }

//         // visited.add (newString);
//         boolean flag = false;
//         for (int i=0; i<newString.length(); i++) {
//             for (int j=0; j<26; j++) {
//                 char c = (char)('a' + j);
//                 String newWord = newString.substring(0,i) + c + newString.substring(i+1);
//                 if (!set.contains(newWord) || visited.contains(newWord)) {
//                     continue;
//                 }
//                 Set<String> newvisited = new HashSet<>(visited);
//                 newvisited.add (newWord);
//                 List<String> newPossibleLadder = new ArrayList<>(possibleLadder);
//                 newPossibleLadder.add (newWord);
//                 if(dfs (newWord, endWord, set, newvisited, newPossibleLadder)) {
//                     flag = true;
//                 }
//             }
//         }
//         if (flag == true) {
//             mp.put (newString, true);
//         }
//         else {
//             mp.put (newString, false);
//         }
//         return flag;


//     }
// }