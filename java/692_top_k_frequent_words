class Solution {
    public List<String> topKFrequent(String[] words, int k) {
     PriorityQueue<Pair<String, Integer>> pq = new PriorityQueue<>((Pair<String, Integer> p1, Pair<String, Integer> p2) -> {
         if (p1.getValue() == p2.getValue()) {
             return p1.getKey().compareTo(p2.getKey());
         }
         return p2.getValue() - p1.getValue();
     }) ;

     Map<String, Integer> mp = new HashMap<String, Integer>();

     for (int i=0; i<words.length; i++) {
         mp.put (words[i], mp.getOrDefault(words[i], 0)+1);
     }

     mp.forEach((key,value) -> pq.add(new Pair(key, value)));

     List<String> retList = new ArrayList<>();
     while (k > 0) {
        //  System.out.println ("size " + pq.size());
         Pair<String, Integer> p = pq.poll();
        //  System.out.println (p.getKey() + " " + p.getValue());
         retList.add (p.getKey());
         k--;
     }
     return retList;
    }
}