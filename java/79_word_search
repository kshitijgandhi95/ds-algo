class Solution {
    boolean[][] visited;
    int rows;
    int columns;
    public boolean exist(char[][] board, String word) {
        rows = board.length;
        columns = board[0].length;

        for (int i=0; i<rows; i++) {
            for (int j=0; j<columns; j++) {
                visited = new boolean[rows][columns];
                // System.out.println ("$$$$$$$$$");
                if (dfs (board, word, 0, i, j)) {
                    return true;
                }
            }
        }
        return false;
    }

    boolean dfs (char[][] board, String word, int index, int r, int c) {
        // System.out.println (index + " " + r + " " + c);
        if (visited[r][c]) {
            return false;
        }
        if (board[r][c] != word.charAt(index)) {
            return false;
        }
        visited[r][c] = true;
        index++;
        if (index == word.length()) {
            return true;
        }
        if (r-1 >= 0 && dfs (board, word, index, r-1, c)) {
            return true;
        }
        if (r+1 < rows && dfs (board, word, index, r+1, c)) {
            return true;
        }
        if (c-1 >= 0 && dfs (board, word, index, r, c-1)) {
            return true;
        }
        if (c+1 < columns && dfs (board, word, index, r, c+1)) {
            return true;
        }
        visited[r][c] = false;
        return false;
    }
}