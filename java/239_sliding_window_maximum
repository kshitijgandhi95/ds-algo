//O(nlogK)
//submitted solution
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        TreeMap<Integer, Integer> sMap = new TreeMap<>(new Comparator<Integer>(){
            public int compare (Integer a, Integer b) {
                return b-a;
            }
        });

        for (int i=0; i<k; i++) {
            sMap.put(nums[i], sMap.getOrDefault(nums[i], 0)+1);
        }

        int[] retArr = new int[nums.length-k+1];
        retArr[0] = sMap.firstKey();
        
        int counter = 1;
        for (int i=k; i<nums.length; i++) {
            int newCount = sMap.get(Integer.valueOf(nums[counter-1])) - 1;
            if (newCount == 0) {
                sMap.remove(Integer.valueOf(nums[counter-1]));
            }
            else {
                sMap.put(nums[counter-1], newCount);
            }

            sMap.put(nums[i], sMap.getOrDefault(nums[i], 0)+1);
            
            retArr[counter] = sMap.firstKey();
            counter++;
        }

        return retArr;
    }
}

//O(n)
//copied solution
public int[] maxSlidingWindow(int[] nums, int k) {
  // assume nums is not null
  int n = nums.length;
  if (n == 0 || k == 0) {
    return new int[0];
  }
  int[] result = new int[n - k + 1]; // number of windows
  Deque<Integer> win = new ArrayDeque<>(); // stores indices
  
  for (int i = 0; i < n; ++i) {
    // remove indices that are out of bound
    while (win.size() > 0 && win.peekFirst() <= i - k) {
      win.pollFirst();
    }
    // remove indices whose corresponding values are less than nums[i]
    while (win.size() > 0 && nums[win.peekLast()] < nums[i]) {
      win.pollLast();
    }
    // add nums[i]
    win.offerLast(i);
    // add to result
    if (i >= k - 1) {
      result[i - k + 1] = nums[win.peekFirst()];
    }
  }
  return result;
}