class Solution {
    List<List<Integer>> prq;
    int numCourses;
    Map<Integer, Integer> traversal;
    Boolean isLoop;

    public int[] findOrder(int numCourses, int[][] p) {
        this.numCourses = numCourses;
        this.prq = new ArrayList<>();
        this.traversal = new HashMap<Integer, Integer>();
        this.isLoop = false;

        for (int i=0; i<numCourses; i++) {
            prq.add(new ArrayList<>());
        }

        for (int i=0; i<p.length; i++) {
            List<Integer> local = prq.get(Integer.valueOf(p[i][0]));
            local.add(p[i][1]);
            prq.set(Integer.valueOf(p[i][0]), local);
        }

        ArrayList<Integer> retList = new ArrayList<>();

        for (int i=0; i<numCourses; i++) {
            if (traversal.getOrDefault(i,0) == 0) {
                traverse(i, retList);
            }
        }
        if (isLoop == true) {
            return new int[0];
        }

        int[] retArr = new int[numCourses];
        for (int i=0; i<retList.size(); i++) {
            retArr[i] = retList.get(i);
        }
        return retArr;
    }

    private void traverse(int index, List<Integer> retArr) {
        if (traversal.getOrDefault(index, 0) == 1) {
            isLoop = true;
            return;
        }
        if (traversal.getOrDefault(index, 0) == 2) {
            return;
        }

        traversal.put(index, 1);

        List<Integer> dependencies = prq.get(index);
        
        for (int i=0; i<dependencies.size(); i++) {
            traverse(dependencies.get(i), retArr);
        }

        traversal.put(index, 2);
        retArr.add (index);        

    }
}