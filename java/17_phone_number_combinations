class Solution {
    public List<String> letterCombinations(String digits) {
        if (digits.length() == 0) {
            return new ArrayList<String>();
        }
        List<List<Character>> map = new LinkedList<>();
        map.add(Arrays.asList('a', 'b', 'c'));
        map.add(Arrays.asList('d', 'e', 'f'));
        map.add(Arrays.asList('g', 'h', 'i'));
        map.add(Arrays.asList('j', 'k', 'l'));
        map.add(Arrays.asList('m', 'n', 'o'));
        map.add(Arrays.asList('p', 'q', 'r', 's'));
        map.add(Arrays.asList('t', 'u', 'v'));
        map.add(Arrays.asList('w', 'x', 'y', 'z'));

        List<StringBuilder> strBldr = new ArrayList<>();
        buildCombinations (digits, 0, new StringBuilder(""), map, strBldr);
        List<String> retArrOfString = new ArrayList<>();
        for (int i=0; i<strBldr.size(); i++) {
            retArrOfString.add(strBldr.get(i).toString());
        }
        return retArrOfString;
    }

    void buildCombinations (String digits, int index, StringBuilder curr, List<List<Character>> map, List<StringBuilder> strBldr) {
        if (index == digits.length()) {
            strBldr.add (curr);
            return;
        }
        int digitIndex = digits.charAt(index) - '2';
        List<Character> l = map.get(digitIndex);
        Iterator<Character> itr = l.listIterator();
        while(itr.hasNext()) {
            char c = itr.next();
            StringBuilder s = new StringBuilder(curr);
            buildCombinations(digits, index+1, s.append(c), map, strBldr);
        }
        return;
    }
}