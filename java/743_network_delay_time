class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        int[] distance = new int[n+1];
        Arrays.fill (distance, Integer.MAX_VALUE);
        
        int[][] adjMatrix = new int[n+1][n+1];
        for (int[] arr: adjMatrix) {
            Arrays.fill (arr, Integer.MAX_VALUE);
        }

        for (int i=0; i<times.length; i++) {
            adjMatrix[times[i][0]][times[i][1]] = times[i][2];
        }

        boolean[] visited = new boolean[n+1];

        Queue<Pair<Integer, Integer>> pQue = new PriorityQueue<>(new Comparator<Pair<Integer, Integer>>(){
            public int compare (Pair<Integer, Integer> a, Pair<Integer, Integer> b) {
                return a.getValue().intValue() - b.getValue().intValue();
            }
        });
        distance[k] = 0;
        pQue.add (new Pair(k, 0));

        // int m = 0;
        while (pQue.size() != 0) {
            // System.out.println (m);
            // m++;
            Pair<Integer, Integer> nodePair = pQue.peek();
            pQue.remove();
            int node = nodePair.getKey().intValue();
            visited[node] = true;

            for (int i=1; i<adjMatrix[node].length; i++) {
              // System.out.println (i + " " + node + " " + adjMatrix[node][i]);
                if (adjMatrix[node][i] < Integer.MAX_VALUE && visited[i] != true) {
                    if (distance[node] + adjMatrix[node][i] < distance[i]) {
                      distance[i] = Math.min(distance[node] + adjMatrix[node][i], distance[i]);
                      pQue.add(new Pair(i, distance[i])); 
                    }
                    
                    // System.out.println (i + " distance " + distance[i]);
                    
                }
            }
        }

        int maxVal = Integer.MIN_VALUE;
        for (int i=1; i<=n; i++) {
            if (distance[i] == Integer.MAX_VALUE) {
                return -1;
            }
            // System.out.println ("val " + distance[i]);
            maxVal = Math.max (maxVal, distance[i]);
        }
        return maxVal;
    }
}