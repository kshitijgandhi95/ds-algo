/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<ArrayDeque<Integer>> retList = new ArrayList<>();
        boolean direction = true;

        List<List<Integer>> comp = new ArrayList<>();

        if (root == null) {
            return comp;
        }

        LinkedList<TreeNode> que = new LinkedList<>();
        que.add (root);

        while (que.size() != 0) {
            int queSize = que.size();
            retList.add (new ArrayDeque<Integer>());
            for (int i=0; i<queSize; i++) {
                TreeNode curr = que.peek();    
                que.removeFirst();
                

                if (direction == true) {
                    retList.get(retList.size()-1).add (curr.val);
                }
                else {
                    retList.get(retList.size()-1).addFirst(curr.val);
                }

                if (curr.left != null) {
                    que.add (curr.left);
                }
                if (curr.right != null) {
                    que.add (curr.right);
                }
            }
            direction = !direction;
        }

        
        for (int i=0; i<retList.size(); i++) {
            comp.add (new ArrayList<>(retList.get(i)));
        }
        return comp;
    }
}