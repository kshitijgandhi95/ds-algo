class Solution {
    public int numIslands(char[][] grid) {
       int[][] visit = new int[grid.length][grid[0].length];
       int islands = 0;
       for (int i=0; i<grid.length; i++) {
           for (int j=0; j<grid[i].length; j++) {
               if (visit[i][j] == 0 && grid[i][j] == '1') {
                   islands++;
                   coverIsland (grid, visit, i, j);
               }
           }
       }
       return islands;
    }

    void coverIsland (char[][] grid, int[][] visit, int i, int j) {
        visit[i][j] = 1;

        if (i-1 >= 0 && grid[i-1][j] == '1' && visit[i-1][j] == 0) {
            coverIsland(grid, visit, i-1, j);
        }

        if (j-1 >= 0 && grid[i][j-1] == '1' && visit[i][j-1] == 0) {
            coverIsland(grid, visit, i, j-1);
        }
        if (i+1 < grid.length && grid[i+1][j] == '1' && visit[i+1][j] == 0) {
            coverIsland(grid, visit, i+1, j);
        }

        if (j+1 < grid[i].length && grid[i][j+1] == '1' && visit[i][j+1] == 0) {
            coverIsland(grid, visit, i, j+1);
        }
        visit[i][j] = 2;
        return;
    }
}