/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        Queue<Node> que = new LinkedList<>();
        if (root == null) {
            return root;
        }
        que.add (root);
        int level = 0;

        while (que.size() != 0) {
            int currSize = que.size();
            for (int i=0; i<currSize-1; i++) {
                Node curr = que.poll();
                Node next = que.peek();
                curr.next = next;
                
                if (curr.left != null) {
                    que.add (curr.left);
                    que.add (curr.right);
                }
            }
            Node curr = que.poll();
            if (curr.left != null) {
                que.add (curr.left);
                que.add (curr.right);
            }
        }
        return root; 
    }
}