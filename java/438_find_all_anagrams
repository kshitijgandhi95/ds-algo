class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        int sLength = s.length();
        int pLength = p.length();

        if (sLength < pLength) {
            return new ArrayList<>();
        }

        Map<Character, Integer> pMap = new HashMap<>();
        
        for (int i=0; i<pLength; i++) {
            pMap.put (p.charAt(i), pMap.getOrDefault(p.charAt(i), 0) + 1);
        }

        List<Integer> retList = new ArrayList<>();

        for (int i=0; i<sLength-pLength+1; ) {
            Map<Character, Integer> sMap = new HashMap<>(pMap);
            int begin = i;
            for (int j=i; j<sLength; j++) {
                if (sMap.containsKey(s.charAt(j))) {
                    int currVal = sMap.get(s.charAt(j));
                    if (currVal > 0) {
                        sMap.put (s.charAt(j), currVal-1);
                        if (check(sMap)) {
                            retList.add(i);
                            sMap.put (s.charAt(begin), 1);
                            begin = begin+1;
                            i=begin;
                        }
                    }
                    else {
                        i++;
                        break;
                    }
                }
                else {
                    i=j+1;
                    break;
                }
            }
        }

        return retList;
        
    }

    private boolean check (Map<Character, Integer> mp) {
        for (Map.Entry<Character, Integer> eSet: mp.entrySet()) {
            if (eSet.getValue() != 0) {
                return false;
            }
        }
        return true;
    }
}