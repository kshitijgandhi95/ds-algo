//copied
class Solution {
public int minCut(String s) {
    char[] c = s.toCharArray();
    int n = c.length;
    int[] cut = new int[n];
    boolean[][] pal = new boolean[n][n];
    
    for(int i = 0; i < n; i++) {
        int min = i;
        for(int j = 0; j <= i; j++) {
            if(c[j] == c[i] && (j + 1 > i - 1 || pal[j + 1][i - 1])) {
                pal[j][i] = true;  
                min = j == 0 ? 0 : Math.min(min, cut[j - 1] + 1);
            }
        }
        cut[i] = min;
    }
    return cut[n - 1];
}
}

//TLE
// class Solution {
//     private int answer = Integer.MAX_VALUE;
//     private Map<String, Integer> cache;

//     public int minCut(String s) {
//         cache = new HashMap<>();

//         return getMinCuts (s, 0, s.length());
//     }

//     private int getMinCuts (String s, int start, int end) {
//         // System.out.println (start + " " + end);
//         if (cache.containsKey(start+"#"+end)) {
//             return cache.get(start+"#"+end);
//         }
//         if (isPalindrome(s, start, end)) {
//             cache.put (start+ "$" + end, 0);
//             // System.out.println ("return val " + start + " " + end + " " + 0);
//             return 0;
//         }

//         int returnVal = Integer.MAX_VALUE;

//         for (int i=start+1; i<end; i++) {
//             returnVal = Math.min (returnVal, getMinCuts (s, start, i) + getMinCuts(s, i, end)+1);
//         }
//         // System.out.println ("return val " + start + " " + end + " " + returnVal);
        
//         cache.put (start+"#"+end, returnVal);
//         return returnVal;
//     }

//     private boolean isPalindrome (String s, int start, int end) {
//         while (start < end-1) {
//             if (s.charAt(start) != s.charAt(end-1)) {
//                 return false;
//             }
//             start++;
//             end--;
//         }
//         return true;
//     }
// }