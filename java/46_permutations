class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> retList = new ArrayList<>();
        List<Integer> rem = new ArrayList<>();
        for (int i=0; i<nums.length; i++) {
            rem.add(nums[i]);
        }
        List<Integer> curr = new ArrayList<>();
        permuteAll (nums, retList, rem, curr);
        return retList;
    }

    private void permuteAll (int[] nums, List<List<Integer>> retList, List<Integer> rem, List<Integer> curr) {
        if (curr.size() == nums.length) {
            retList.add (curr);
            return;
        }
        for (int i=0; i<rem.size(); i++) {
            List<Integer> newCurrList = new ArrayList<Integer>(curr);
            List<Integer> newRemList = new ArrayList<Integer>(rem);
            newCurrList.add (newRemList.get(i));
            newRemList.remove(i);
            permuteAll(nums, retList, newRemList, newCurrList);
        }
        return;
    }
}