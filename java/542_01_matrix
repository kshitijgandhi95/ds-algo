class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int rowLength = mat.length;
        int colLength = mat[0].length;
        int[][] distance = new int[rowLength][colLength];
        boolean[][] calculated = new boolean[rowLength][colLength];

        Queue<Pair<Integer, Integer>> que = new LinkedList<Pair<Integer, Integer>>();

        for (int i=0; i<mat.length; i++) {
            for (int j=0; j<mat[0].length; j++) {
                if (mat[i][j] == 0) {
                    que.add(new Pair(i,j));
                    calculated[i][j] = true;
                    distance[i][j] = 0;
                }
            }
        }

        while (!que.isEmpty()) {
            Pair<Integer, Integer> p = que.peek();
            que.remove();

            int i = p.getKey();
            int j = p.getValue();

            if (i+1 < rowLength && calculated[i+1][j] == false && mat[i+1][j] == 1) {
                distance[i+1][j] = distance[i][j] + 1;
                calculated[i+1][j] = true;
                que.add(new Pair(i+1, j));
            }

            if (j+1 < colLength && calculated[i][j+1] == false && mat[i][j+1] == 1) {
                distance[i][j+1] = distance[i][j] + 1;
                calculated[i][j+1] = true;
                que.add(new Pair(i, j+1));
            }

            if (i-1 >= 0 && calculated[i-1][j] == false && mat[i-1][j] == 1) {
                distance[i-1][j] = distance[i][j] + 1;
                calculated[i-1][j] = true;
                que.add(new Pair(i-1, j));
            }

            if (j-1 >= 0 && calculated[i][j-1] == false && mat[i][j-1] == 1) {
                distance[i][j-1] = distance[i][j] + 1;
                calculated[i][j-1] = true;
                que.add(new Pair(i, j-1));
            }
        }

        return distance;
    }
}