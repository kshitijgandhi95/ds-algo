class Solution {
    public int[][] merge(int[][] intervals) {
        List<List<Integer>> arrList = new ArrayList<List<Integer>>();
        if (intervals.length == 0) {
            return (new int[0][]);
        }
        Arrays.sort(intervals, new java.util.Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return Integer.compare(a[0], b[0]);
            }
        });

        ArrayList<Integer> arr = new ArrayList<>();
        arr.add (intervals[0][0]);
        arr.add (intervals[0][1]);
        arrList.add (arr);

        for (int i=1; i<intervals.length; i++) {
            if (intervals[i][0] <= arrList.get(arrList.size() - 1).get(1)) {
                arrList.get(arrList.size() - 1).set(1, Math.max(intervals[i][1], arrList.get(arrList.size()-1).get(1)));
            }
            else {
                ArrayList<Integer> arr1 = new ArrayList<>();
                arr1.add (intervals[i][0]);
                arr1.add (intervals[i][1]);
                arrList.add (arr1);
            }
        }
        int [][] retArr = new int[arrList.size()][2];
        for (int i=0; i<arrList.size(); i++) {
            retArr[i][0] = arrList.get(i).get(0).intValue();
            retArr[i][1] = arrList.get(i).get(1).intValue();
        }
        return retArr;
    }
}