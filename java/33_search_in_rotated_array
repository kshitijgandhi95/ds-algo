class Solution {
    public int search(int[] nums, int target) {
       int pivot = findPivot(nums, 0, nums.length-1);
       if (nums[pivot] == target) {
           return pivot;
       }
       if(nums[nums.length-1]<target)
            return binary(nums,0,pivot-1,target);
        return binary(nums,pivot+1,nums.length-1,target);
    }

    int findPivot(int[] nums, int start, int end) {
        if (start > end) {
            return start;
        }
        int mid = (start + end)/2;
        
        if (mid - 1 >=0 && nums[mid-1] > nums[mid]) {
            return mid-1;
        }
        if (nums[end] < nums[mid]) {
            return findPivot(nums, mid+1, end);
        }
        return findPivot(nums, start, mid-1);
    }

    int binary(int[] a,int i,int j,int k){
        if(i<=j){
            int m=(i+j)/2;
            if(a[m]==k)
                return m;
            if(a[m]>k)
                return binary(a,i,m-1,k);
            else 
                return binary(a,m+1,j,k);
        }
        return -1;
    }

    
}