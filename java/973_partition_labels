class Solution {
    public List<Integer> partitionLabels(String s) {
        Integer[][] intervals = new Integer[26][2];
        for (Integer[] arr: intervals) {
            Arrays.fill (arr, -1);
        }

        for(int i=0; i<s.length(); i++) {
            char c = s.charAt(i);
            if (intervals[c-'a'][0] == -1) {
                intervals[c-'a'][0] = i;
            }
            intervals[c-'a'][1] = i;
        }

        Arrays.sort (intervals, new Comparator<Integer[]>() {
            public int compare (Integer[] a, Integer[] b) {
                return a[0] - b[0];
            }
        });

        List<List<Integer>> mergedIntervals = new ArrayList<>();

        int startIndex = 0;
        while (startIndex < intervals.length) {
            if (intervals[startIndex][0] == -1) {
                startIndex++;
            }
            else {
                break;
            }
        }

        mergedIntervals.add (Arrays.asList(intervals[startIndex]));
        int mergedIntervalIndex = 0;

        for (int i=startIndex+1; i<intervals.length; i++) {
            if (intervals[i][0] < mergedIntervals.get(mergedIntervalIndex).get(1)) {
                mergedIntervals.get(mergedIntervalIndex).set(1, Math.max(intervals[i][1], mergedIntervals.get(mergedIntervalIndex).get(1)));
            }
            else {
                mergedIntervals.add (Arrays.asList(intervals[i]));
                mergedIntervalIndex++;
            }
        }

        List<Integer> retList = new ArrayList<>();
        
        for (int i=0; i<mergedIntervals.size(); i++) {
            int size = mergedIntervals.get(i).get(1) - mergedIntervals.get(i).get(0) +1;
            retList.add(size);
        }
        
        return retList;
    }
}