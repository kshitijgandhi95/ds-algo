/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
        if (root == null) {
            return true;
        }
        int val =  internalIsBalanced (root, 0);
        if (val == -1) {
            return false;
        }
        return true;
    }

    public int internalIsBalanced (TreeNode root, int depth) {
        int leftDepth, rightDepth;
        leftDepth = rightDepth = depth;

        if (root.left != null) {
            leftDepth = internalIsBalanced (root.left, depth + 1);
            if (leftDepth == -1) {
                return -1;
            }
        }
        if (root.right != null) {
            rightDepth = internalIsBalanced (root.right, depth + 1);
            if (rightDepth == -1) {
                return -1;
            }
        }
        if (Math.abs (leftDepth - rightDepth) <= 1) {
            return Math.max (leftDepth, rightDepth);
        }
        return -1;
    }
}