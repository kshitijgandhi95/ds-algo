/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode retListNode = null;
        ListNode head = null;
        while (!isIterationOver(lists)) {
            int index = minIndexList(lists);
            if (index == -1) {
                return head;
            }
            if (head == null) {
                retListNode = head = new ListNode(lists[index].val);
                lists[index] = lists[index].next;
                continue;
            }
            retListNode.next = new ListNode(lists[index].val);
            retListNode = retListNode.next;
            lists[index] = lists[index].next;
        }
        return head;
    }

    boolean isIterationOver (ListNode[] lists) {
        for (int i=0; i<lists.length; i++) {
            if (lists[i] != null) {
                return false;
            }
        }
        return true;
    }

    int minIndexList (ListNode[] lists) {
        int index = -1;
        int currMin = Integer.MAX_VALUE;
        for (int i=0; i<lists.length; i++) {
            if (lists[i] == null) {
                continue;
            }
            if (lists[i].val < currMin) {
                index = i;
                currMin = lists[i].val;
            }
        }
        return index;
    }
}