class Solution {
    private int answer = 0;
    private int rows;
    private int columns;

    public int uniquePathsIII(int[][] grid) {
        Pair<Integer, Integer> start = getPoint(grid, 1);
        Pair<Integer, Integer> end = getPoint(grid, 2);
        rows = grid.length;
        columns = grid[0].length;

        int[][] visited = new int[rows][columns];

        for (int[] arr: visited) {
            Arrays.fill (arr, 0);
        }

        return getNumberOfPaths (grid, visited, start, end);
    }

    private int getNumberOfPaths (int[][] grid, int[][] visited, Pair<Integer, Integer> start, Pair<Integer, Integer> end) {
        // System.out.println (start.getKey() + " " + start.getValue());
        visited[start.getKey()][start.getValue()] = 1;

        if (start.getKey() == end.getKey() && start.getValue() == end.getValue()) {
            
            // System.out.println ("returning 1");
            if (covered(visited, grid)) {
                return 1;
            }
            return 0;
        }

        visited[start.getKey()][start.getValue()] = 1;
        
        int answer = 0;

        if (start.getKey()-1 >= 0 && visited[start.getKey()-1][start.getValue()] == 0 && grid[start.getKey()-1][start.getValue()] != -1) {
            answer+= getNumberOfPaths (grid, copyArr(visited), new Pair<Integer, Integer>(start.getKey()-1, start.getValue()), end);
        }
        if (start.getKey()+1 < rows && visited[start.getKey()+1][start.getValue()] == 0 && grid[start.getKey()+1][start.getValue()] != -1) {
            answer+= getNumberOfPaths (grid, copyArr(visited), new Pair<Integer, Integer>(start.getKey()+1, start.getValue()), end);
        }
        if (start.getValue()-1 >= 0 && visited[start.getKey()][start.getValue()-1] == 0 && grid[start.getKey()][start.getValue()-1] != -1) {
            answer+= getNumberOfPaths (grid, copyArr(visited), new Pair<Integer, Integer>(start.getKey(), start.getValue()-1), end);
        }
        if (start.getValue()+1 < columns && visited[start.getKey()][start.getValue()+1] == 0 && grid[start.getKey()][start.getValue()+1] != -1) {
            answer+= getNumberOfPaths (grid, copyArr(visited), new Pair<Integer, Integer>(start.getKey(), start.getValue()+1), end);
        }
        // System.out.println ("returning "+ start.getKey() + " " + start.getValue()+ " "+ answer);
        return answer;
    }

    private boolean covered (int[][] visited, int[][] grid) {
        for (int i=0; i<visited.length; i++) {
            for (int j=0; j<visited[i].length; j++) {
                if (grid[i][j] != -1 && visited[i][j] == 0) {
                    return false;
                }
            }
        }
        return true;
    }

    private int[][] copyArr (int[][] org) {
        int[][] copied = new int[org.length][];

        for (int i=0; i<org.length; i++) {
            copied[i] = Arrays.copyOf(org[i], org[i].length);
        }

        return copied;
    }

    private Pair<Integer, Integer> getPoint(int[][] grid, int number) {
        for (int i=0; i<grid.length; i++) {
            for (int j=0; j<grid[0].length; j++) {
                if (grid[i][j] == number) {
                    return new Pair<>(i, j);
                }
            }
        }
        return null;
    }
}